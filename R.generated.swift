// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R {
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `avatar`.
    static let avatar = ImageResource(bundle: _R.hostingBundle, name: "avatar")
    /// Image `logo`.
    static let logo = ImageResource(bundle: _R.hostingBundle, name: "logo")
    /// Image `pin`.
    static let pin = ImageResource(bundle: _R.hostingBundle, name: "pin")
    /// Image `placeholder_filled`.
    static let placeholder_filled = ImageResource(bundle: _R.hostingBundle, name: "placeholder_filled")
    /// Image `placeholder`.
    static let placeholder = ImageResource(bundle: _R.hostingBundle, name: "placeholder")
    /// Image `settings_filled`.
    static let settings_filled = ImageResource(bundle: _R.hostingBundle, name: "settings_filled")
    /// Image `settings`.
    static let settings = ImageResource(bundle: _R.hostingBundle, name: "settings")
    /// Image `user`.
    static let user = ImageResource(bundle: _R.hostingBundle, name: "user")
    
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_filled", bundle: ..., traitCollection: ...)`
    static func placeholder_filled(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.placeholder_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_filled", bundle: ..., traitCollection: ...)`
    static func settings_filled(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.settings_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// fr translation: E-mail
      /// 
      /// Locales: fr, en
      static let email = StringResource(key: "email", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Erreur
      /// 
      /// Locales: fr, en
      static let error = StringResource(key: "error", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Femme
      /// 
      /// Locales: fr, en
      static let female = StringResource(key: "female", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Homme
      /// 
      /// Locales: fr, en
      static let male = StringResource(key: "male", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Les informations entrées ne sont pas valides
      /// 
      /// Locales: fr, en
      static let connection_fail = StringResource(key: "connection_fail", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Mot de passe
      /// 
      /// Locales: fr, en
      static let password = StringResource(key: "password", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Mot de passe oublié ?
      /// 
      /// Locales: fr, en
      static let passwd_forgot = StringResource(key: "passwd_forgot", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Pseudo
      /// 
      /// Locales: fr, en
      static let nickname = StringResource(key: "nickname", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: S'enregistrer
      /// 
      /// Locales: fr, en
      static let sign_up = StringResource(key: "sign_up", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Se Connecter
      /// 
      /// Locales: fr, en
      static let sign_in = StringResource(key: "sign_in", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Se déconnecter
      /// 
      /// Locales: fr, en
      static let logout = StringResource(key: "logout", tableName: "Localizable", bundle: _R.hostingBundle, locales: ["fr", "en"], comment: nil)
      
      /// fr translation: E-mail
      /// 
      /// Locales: fr, en
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Erreur
      /// 
      /// Locales: fr, en
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Femme
      /// 
      /// Locales: fr, en
      static func female(_: Void = ()) -> String {
        return NSLocalizedString("female", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Homme
      /// 
      /// Locales: fr, en
      static func male(_: Void = ()) -> String {
        return NSLocalizedString("male", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Les informations entrées ne sont pas valides
      /// 
      /// Locales: fr, en
      static func connection_fail(_: Void = ()) -> String {
        return NSLocalizedString("connection_fail", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Mot de passe
      /// 
      /// Locales: fr, en
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Mot de passe oublié ?
      /// 
      /// Locales: fr, en
      static func passwd_forgot(_: Void = ()) -> String {
        return NSLocalizedString("passwd_forgot", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Pseudo
      /// 
      /// Locales: fr, en
      static func nickname(_: Void = ()) -> String {
        return NSLocalizedString("nickname", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: S'enregistrer
      /// 
      /// Locales: fr, en
      static func sign_up(_: Void = ()) -> String {
        return NSLocalizedString("sign_up", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Se Connecter
      /// 
      /// Locales: fr, en
      static func sign_in(_: Void = ()) -> String {
        return NSLocalizedString("sign_in", bundle: _R.hostingBundle, comment: "")
      }
      
      /// fr translation: Se déconnecter
      /// 
      /// Locales: fr, en
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: _R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  static let hostingBundle = Bundle(identifier: "Nightline.AlexandreOdet") ?? Bundle.main
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}