//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Default-568h@2x.png`.
    static let default568h2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Default-568h@2x", pathExtension: "png")
    
    /// `bundle.url(forResource: "Default-568h@2x", withExtension: "png")`
    static func default568h2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.default568h2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 32 images.
  struct image {
    /// Image `Default-568h`.
    static let default568h = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-568h")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `bar`.
    static let bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar")
    /// Image `beer`.
    static let beer = Rswift.ImageResource(bundle: R.hostingBundle, name: "beer")
    /// Image `birthday`.
    static let birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "birthday")
    /// Image `champagne`.
    static let champagne = Rswift.ImageResource(bundle: R.hostingBundle, name: "champagne")
    /// Image `cocktail`.
    static let cocktail = Rswift.ImageResource(bundle: R.hostingBundle, name: "cocktail")
    /// Image `female`.
    static let female = Rswift.ImageResource(bundle: R.hostingBundle, name: "female")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `heart_filled`.
    static let heart_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_filled")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `interrogation`.
    static let interrogation = Rswift.ImageResource(bundle: R.hostingBundle, name: "interrogation")
    /// Image `lemonade`.
    static let lemonade = Rswift.ImageResource(bundle: R.hostingBundle, name: "lemonade")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `male`.
    static let male = Rswift.ImageResource(bundle: R.hostingBundle, name: "male")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `money-bag`.
    static let moneyBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "money-bag")
    /// Image `party`.
    static let party = Rswift.ImageResource(bundle: R.hostingBundle, name: "party")
    /// Image `picture`.
    static let picture = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder_filled`.
    static let placeholder_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_filled")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `settings_filled`.
    static let settings_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_filled")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `test_logo`.
    static let test_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "test_logo")
    /// Image `toast`.
    static let toast = Rswift.ImageResource(bundle: R.hostingBundle, name: "toast")
    /// Image `trophy`.
    static let trophy = Rswift.ImageResource(bundle: R.hostingBundle, name: "trophy")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    
    /// `UIImage(named: "Default-568h", bundle: ..., traitCollection: ...)`
    static func default568h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default568h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bar", bundle: ..., traitCollection: ...)`
    static func bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beer", bundle: ..., traitCollection: ...)`
    static func beer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "birthday", bundle: ..., traitCollection: ...)`
    static func birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "champagne", bundle: ..., traitCollection: ...)`
    static func champagne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.champagne, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cocktail", bundle: ..., traitCollection: ...)`
    static func cocktail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cocktail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "female", bundle: ..., traitCollection: ...)`
    static func female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart_filled", bundle: ..., traitCollection: ...)`
    static func heart_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "interrogation", bundle: ..., traitCollection: ...)`
    static func interrogation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.interrogation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lemonade", bundle: ..., traitCollection: ...)`
    static func lemonade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lemonade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "male", bundle: ..., traitCollection: ...)`
    static func male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money-bag", bundle: ..., traitCollection: ...)`
    static func moneyBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyBag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "party", bundle: ..., traitCollection: ...)`
    static func party(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.party, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "picture", bundle: ..., traitCollection: ...)`
    static func picture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_filled", bundle: ..., traitCollection: ...)`
    static func placeholder_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_filled", bundle: ..., traitCollection: ...)`
    static func settings_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "test_logo", bundle: ..., traitCollection: ...)`
    static func test_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toast", bundle: ..., traitCollection: ...)`
    static func toast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toast, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trophy", bundle: ..., traitCollection: ...)`
    static func trophy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trophy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 36 localization keys.
    struct localizable {
      /// fr translation: Bar
      /// 
      /// Locales: fr, en
      static let bar = Rswift.StringResource(key: "bar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Bar lounge
      /// 
      /// Locales: fr, en
      static let lounge = Rswift.StringResource(key: "lounge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Bière
      /// 
      /// Locales: fr, en
      static let beer = Rswift.StringResource(key: "beer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Boissons
      /// 
      /// Locales: fr, en
      static let drinks = Rswift.StringResource(key: "drinks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Boîte de nuit
      /// 
      /// Locales: fr, en
      static let club = Rswift.StringResource(key: "club", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Bourbon
      /// 
      /// Locales: fr, en
      static let bourbon = Rswift.StringResource(key: "bourbon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Cancel
      /// 
      /// Locales: fr, en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Champagne
      /// 
      /// Locales: fr, en
      static let champagne = Rswift.StringResource(key: "champagne", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Cocktails
      /// 
      /// Locales: fr, en
      static let cocktail = Rswift.StringResource(key: "cocktail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: E-mail
      /// 
      /// Locales: fr, en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Erreur
      /// 
      /// Locales: fr, en
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Erreur au chargement des données
      /// 
      /// Locales: fr, en
      static let error_loading_data = Rswift.StringResource(key: "error_loading_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Établissements
      /// 
      /// Locales: fr, en
      static let etabl = Rswift.StringResource(key: "etabl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: FAQ
      /// 
      /// Locales: fr, en
      static let faq = Rswift.StringResource(key: "faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Femme
      /// 
      /// Locales: fr, en
      static let female = Rswift.StringResource(key: "female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Fratenité
      /// 
      /// Locales: fr, en
      static let brotherhood = Rswift.StringResource(key: "brotherhood", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Groupe d'ami
      /// 
      /// Locales: fr, en
      static let friends = Rswift.StringResource(key: "friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Homme
      /// 
      /// Locales: fr, en
      static let male = Rswift.StringResource(key: "male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Les informations entrées ne sont pas valides
      /// 
      /// Locales: fr, en
      static let connection_fail = Rswift.StringResource(key: "connection_fail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Mot de passe
      /// 
      /// Locales: fr, en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Mot de passe oublié ?
      /// 
      /// Locales: fr, en
      static let passwd_forgot = Rswift.StringResource(key: "passwd_forgot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Profil
      /// 
      /// Locales: fr, en
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Pseudo
      /// 
      /// Locales: fr, en
      static let nickname = Rswift.StringResource(key: "nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Pub irlandais
      /// 
      /// Locales: fr, en
      static let pub = Rswift.StringResource(key: "pub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Remerciements
      /// 
      /// Locales: fr, en
      static let thanks = Rswift.StringResource(key: "thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Réglages
      /// 
      /// Locales: fr, en
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Rhum
      /// 
      /// Locales: fr, en
      static let rhum = Rswift.StringResource(key: "rhum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: S'enregistrer
      /// 
      /// Locales: fr, en
      static let sign_up = Rswift.StringResource(key: "sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Se Connecter
      /// 
      /// Locales: fr, en
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Se déconnecter
      /// 
      /// Locales: fr, en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Sisterhood
      /// 
      /// Locales: fr, en
      static let sisterhood = Rswift.StringResource(key: "sisterhood", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Tapez l'email sur lequel vous souhaitez recevoir votre mot de passe
      /// 
      /// Locales: fr, en
      static let type_mail = Rswift.StringResource(key: "type_mail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Version
      /// 
      /// Locales: fr, en
      static let build = Rswift.StringResource(key: "build", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Vin
      /// 
      /// Locales: fr, en
      static let wine = Rswift.StringResource(key: "wine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Vodka
      /// 
      /// Locales: fr, en
      static let vodka = Rswift.StringResource(key: "vodka", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      /// fr translation: Whisky
      /// 
      /// Locales: fr, en
      static let whisky = Rswift.StringResource(key: "whisky", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr", "en"], comment: nil)
      
      /// fr translation: Bar
      /// 
      /// Locales: fr, en
      static func bar(_: Void = ()) -> String {
        return NSLocalizedString("bar", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Bar lounge
      /// 
      /// Locales: fr, en
      static func lounge(_: Void = ()) -> String {
        return NSLocalizedString("lounge", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Bière
      /// 
      /// Locales: fr, en
      static func beer(_: Void = ()) -> String {
        return NSLocalizedString("beer", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Boissons
      /// 
      /// Locales: fr, en
      static func drinks(_: Void = ()) -> String {
        return NSLocalizedString("drinks", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Boîte de nuit
      /// 
      /// Locales: fr, en
      static func club(_: Void = ()) -> String {
        return NSLocalizedString("club", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Bourbon
      /// 
      /// Locales: fr, en
      static func bourbon(_: Void = ()) -> String {
        return NSLocalizedString("bourbon", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Cancel
      /// 
      /// Locales: fr, en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Champagne
      /// 
      /// Locales: fr, en
      static func champagne(_: Void = ()) -> String {
        return NSLocalizedString("champagne", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Cocktails
      /// 
      /// Locales: fr, en
      static func cocktail(_: Void = ()) -> String {
        return NSLocalizedString("cocktail", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: E-mail
      /// 
      /// Locales: fr, en
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Erreur
      /// 
      /// Locales: fr, en
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Erreur au chargement des données
      /// 
      /// Locales: fr, en
      static func error_loading_data(_: Void = ()) -> String {
        return NSLocalizedString("error_loading_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Établissements
      /// 
      /// Locales: fr, en
      static func etabl(_: Void = ()) -> String {
        return NSLocalizedString("etabl", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: FAQ
      /// 
      /// Locales: fr, en
      static func faq(_: Void = ()) -> String {
        return NSLocalizedString("faq", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Femme
      /// 
      /// Locales: fr, en
      static func female(_: Void = ()) -> String {
        return NSLocalizedString("female", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Fratenité
      /// 
      /// Locales: fr, en
      static func brotherhood(_: Void = ()) -> String {
        return NSLocalizedString("brotherhood", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Groupe d'ami
      /// 
      /// Locales: fr, en
      static func friends(_: Void = ()) -> String {
        return NSLocalizedString("friends", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Homme
      /// 
      /// Locales: fr, en
      static func male(_: Void = ()) -> String {
        return NSLocalizedString("male", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Les informations entrées ne sont pas valides
      /// 
      /// Locales: fr, en
      static func connection_fail(_: Void = ()) -> String {
        return NSLocalizedString("connection_fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Mot de passe
      /// 
      /// Locales: fr, en
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Mot de passe oublié ?
      /// 
      /// Locales: fr, en
      static func passwd_forgot(_: Void = ()) -> String {
        return NSLocalizedString("passwd_forgot", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Profil
      /// 
      /// Locales: fr, en
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Pseudo
      /// 
      /// Locales: fr, en
      static func nickname(_: Void = ()) -> String {
        return NSLocalizedString("nickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Pub irlandais
      /// 
      /// Locales: fr, en
      static func pub(_: Void = ()) -> String {
        return NSLocalizedString("pub", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Remerciements
      /// 
      /// Locales: fr, en
      static func thanks(_: Void = ()) -> String {
        return NSLocalizedString("thanks", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Réglages
      /// 
      /// Locales: fr, en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Rhum
      /// 
      /// Locales: fr, en
      static func rhum(_: Void = ()) -> String {
        return NSLocalizedString("rhum", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: S'enregistrer
      /// 
      /// Locales: fr, en
      static func sign_up(_: Void = ()) -> String {
        return NSLocalizedString("sign_up", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Se Connecter
      /// 
      /// Locales: fr, en
      static func sign_in(_: Void = ()) -> String {
        return NSLocalizedString("sign_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Se déconnecter
      /// 
      /// Locales: fr, en
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Sisterhood
      /// 
      /// Locales: fr, en
      static func sisterhood(_: Void = ()) -> String {
        return NSLocalizedString("sisterhood", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Tapez l'email sur lequel vous souhaitez recevoir votre mot de passe
      /// 
      /// Locales: fr, en
      static func type_mail(_: Void = ()) -> String {
        return NSLocalizedString("type_mail", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Version
      /// 
      /// Locales: fr, en
      static func build(_: Void = ()) -> String {
        return NSLocalizedString("build", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Vin
      /// 
      /// Locales: fr, en
      static func wine(_: Void = ()) -> String {
        return NSLocalizedString("wine", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Vodka
      /// 
      /// Locales: fr, en
      static func vodka(_: Void = ()) -> String {
        return NSLocalizedString("vodka", bundle: R.hostingBundle, comment: "")
      }
      
      /// fr translation: Whisky
      /// 
      /// Locales: fr, en
      static func whisky(_: Void = ()) -> String {
        return NSLocalizedString("whisky", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}